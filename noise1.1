library(jpeg)
library(reticulate)
library(jpeg)
library(tidyverse)
library(keras)
library(tensorflow)
install_tensorflow(extra_packages="pillow")

setwd("/Users/hallelin/Library/CloudStorage/OneDrive-purdue.edu/SPRING 2023/IE332/Project 2")

algorithm2 <- function(x,P){
  x_size <- length(x[,1,1]) #get width of image
  y_size <- length(x[1,,1]) #get height of image
  
  percent <- P #percent of pixels to change
  max_pixels <- x_size * y_size * percent #calculate max pixels
  
  if(max_pixels > 0 ){
    x_coords = c(floor(runif(max_pixels, min = 0, max = x_size))) #randomly sample x coorindate
    y_coords = c(floor(runif(max_pixels, min = 0, max = y_size))) #randomly sample y coordinate
    newx = x * 0 #clone original image array and fill with zeros
    for(i in 1:max_pixels){
      red = round(runif(1,min = 0,max = 1),1) #find random R color
      green = round(runif(1,min = 0,max = 1),1) #find random green color
      blue = round(runif(1,min = 0,max = 1),1) #find random blue color
      
      xindex = x_coords[i] #get x index to change
      yindex = y_coords[i] #get y index to change
      
      newx[xindex,yindex,1] <- red #modifies red value
      newx[xindex,yindex,2] <- green #modifies green value
      newx[xindex,yindex,3] <- blue #modifies blue value
    }
    noisyx <- x + newx #add noise to image
  }
  writeJPEG(noisyx, "./algorithm2modulated.jpg")
}




